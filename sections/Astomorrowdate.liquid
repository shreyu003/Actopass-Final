<div class="astomrrow">
    <div class="container-1170">
        <div class="tomrow_flex">
            <div>
                <p class="m-0"> {{ section.settings.tommorow-ttl }} </p>
                <div class="date-container">
                    <input class="dateinput" type="text" name="datetimes">
                    {{ section.settings.date-icon }}
                </div>
            </div>
            <div class="w_90">
                <p class="m-0"> {{ section.settings.month-name }} </p>
                <div class="date-slider" id="date-slider"></div>
                <div id="events"></div>
            </div>  
        </div>
    </div>
</div>

<section class="as_product_main-block">
    <div class="container-1170">
        <div class="as_product_inner">
            <div class="row">
                <div class="col-12">
                    <h2 class="as_title">Selected Date: <span id="selected-date"></span></h2>
                </div>
            </div>
            <div id="products-list" class="as_product_block"></div>
        </div>
        <div class="as_product_inner">
            <div class="row">
                <div class="col-12">
                    <h2 class="as_title">Next Day: <span id="next-date"></span></h2>
                </div>
            </div>
            <div id="products-list-1" class="as_product_block"></div>
        </div>
        <div class="as_product_inner">
            <div class="row">
                <div class="col-12">
                    <h2 class="as_title">Day After Next: <span id="next-after-date"></span></h2>
                </div>
            </div>
            <div id="products-list-2" class="as_product_block"></div>
        </div>
    </div>
</section>



<script>
    function generateDates() { 
    const dateSlider = document.getElementById('date-slider');
    const today = new Date();
    let date = new Date(today);

    let currentMonth = today.toLocaleString('default', { month: 'long', year: 'numeric' });
    document.querySelector('.w_90 p.m-0').textContent = currentMonth;

    const endDate = new Date();
    endDate.setDate(today.getDate() + 90);

    while (date <= endDate) {
        const dateElement = document.createElement('div');
        dateElement.className = 'date';
        dateElement.textContent = `${date.getDate()} ${date.toLocaleString('default', { weekday: 'short' })}`;
        dateElement.dataset.date = date.toISOString().split('T')[0];

        if (date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()) {
            dateElement.classList.add('current-date');
        }

        dateElement.addEventListener('click', function() {
            document.querySelectorAll('.date').forEach(el => el.classList.remove('selected'));
            this.classList.add('selected');
            const selectedDate = this.dataset.date;
            document.getElementById('selected-date').textContent = selectedDate;
            showProductsByDate(selectedDate);
        });

        dateSlider.appendChild(dateElement);
        date.setDate(date.getDate() + 1);
    }
}
generateDates();

function showProductsByDate(date) {
    const products = window.productData || [];
    const selectedDate = new Date(date);

    // Clear previous product displays
    document.getElementById('products-list').innerHTML = '';
    document.getElementById('products-list-1').innerHTML = '';
    document.getElementById('products-list-2').innerHTML = '';

    // Function to generate product blocks
    function generateProductBlocks(date, containerId) {
        const formattedDate = date.toISOString().split('T')[0]; // YYYY-MM-DD
        const filteredProducts = products.filter(product => product.starting_date === formattedDate);
        const container = document.getElementById(containerId);
        container.innerHTML = ''; // Clear previous content
        
        filteredProducts.forEach(product => {
            const productElement = document.createElement('div');
            productElement.className = 'as_product';
            productElement.innerHTML = `
                <a href="${product.url}">
                    <div class="as_product_image">
                        <img src="${product.image}" alt="${product.title}">
                    </div>
                    <div class="as_product-content">
                        <p class="as_product_ttl">${product.title}</p>
                        <p> From <strong>${product.price}</strong> </p>
                    </div>
                </a>
            `;
            container.appendChild(productElement);
        });
    }

    // Show products for selected date
    generateProductBlocks(selectedDate, 'products-list');

    // Function to find the next available date with products
    function findNextAvailableDate(startDate) {
        let nextDate = new Date(startDate);
        nextDate.setDate(startDate.getDate() + 1);
        while (true) {
            const formattedDate = nextDate.toISOString().split('T')[0];
            if (products.some(product => product.starting_date === formattedDate)) {
                return nextDate;
            }
            nextDate.setDate(nextDate.getDate() + 1);
        }
    }

    // Calculate and show products for the next two days
    let nextDay = new Date(selectedDate);
    nextDay.setDate(selectedDate.getDate() + 1);
    generateProductBlocks(nextDay, 'products-list-1');
    
    let dayAfterNext = new Date(selectedDate);
    dayAfterNext.setDate(selectedDate.getDate() + 2);
    generateProductBlocks(dayAfterNext, 'products-list-2');

    // Find next available date if the next day or day after next has no products
    let availableNextDay = findNextAvailableDate(nextDay);
    let availableDayAfterNext = findNextAvailableDate(availableNextDay);
    
    // Update dates display
    const formatDate = (date) => date.toLocaleDateString('en-GB', { day: '2-digit', month: 'long', year: 'numeric' });
    
    if (document.getElementById('products-list-1').innerHTML === '') {
        generateProductBlocks(availableNextDay, 'products-list-1');
        document.getElementById('next-date').textContent = formatDate(availableNextDay);
    } else {
        document.getElementById('next-date').textContent = formatDate(nextDay);
    }
    
    if (document.getElementById('products-list-2').innerHTML === '') {
        generateProductBlocks(availableDayAfterNext, 'products-list-2');
        document.getElementById('next-after-date').textContent = formatDate(availableDayAfterNext);
    } else {
        document.getElementById('next-after-date').textContent = formatDate(dayAfterNext);
    }
}


window.productData = [
    {% for product in collections.all.products %}
        {% if product.metafields.custom.starting_date %}
            {
                "title": "{{ product.title }}",
                "url": "{{ product.url }}",
                "image": "{{ product.featured_image | img_url: '1000x1000' }}",
                "price": "{{ product.price | money_with_currency }}",
                "starting_date": "{{ product.metafields.custom.starting_date }}"
            }
            {% unless forloop.last %},{% endunless %}
        {% endif %}
    {% endfor %}
];

</script>




{% schema %}
{
    "name": "As_Tomorrow",
    "settings": [
        {
            "type": "text",
            "id": "tommorow-ttl",
            "label": "Add Title",
            "default": "More dates"
        },
        {
            "type": "html",
            "id": "date-icon",
            "label": "Add SVG Icon"
        },
        {
            "type": "text",
            "id": "month-name",
            "label": "Add Month Name",
            "default": "July 2024"
        }
    ],
    "presets": [
        {
            "name": "As_Tomorrow"
        }
    ]
}
{% endschema %}